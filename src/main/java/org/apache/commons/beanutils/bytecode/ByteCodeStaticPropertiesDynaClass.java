/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.beanutils.bytecode;

import net.sf.cglib.beans.BeanGenerator;

import org.apache.commons.beanutils.DelegatingDynaClass;
import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.DynaProperty;

/**
 * DynaClass Wrapper who's {@link #newInstance()} returns DynaBean
 * which actually are "real" statically-typed JavaBeans, 
 * with Getters & Setters from dynamically generated
 * bytecode. 
 * 
 * This is useful when such DynaBeans have to inter-op
 * with other frameworks who use reflection (and do not go 
 * through DynaBean's BeanUtil helper).
 * 
 * The new DynaBeans returned here are instances of classes
 * (from dynamically generated bytecode) which internally have
 * private member fields for each property, and do not have
 * a Map<String, Object> field such as e.g. the
 * BasicDynaBean implementation does.
 * 
 * @see ByteCodeWrappingDynaBeanFactory an alternative approach
 * 
 * @author Michael Vorburger
 */
public class ByteCodeStaticPropertiesDynaClass extends DelegatingDynaClass {

	private final Class/*<ByteCodeStaticPropertiesDynaBean>*/ klass;

	//@SuppressWarnings("unchecked")
	public ByteCodeStaticPropertiesDynaClass(DynaClass delegate) {
		super(delegate);

		BeanGenerator bg = new BeanGenerator();
		bg.setSuperclass(ByteCodeStaticPropertiesDynaBean.class);
		for (int i = 0; i < delegate.getDynaProperties().length; i++) {
			DynaProperty property = delegate.getDynaProperties()[i];
			bg.addProperty(property.getName(), property.getType());
		}

		this.klass = (Class/*<ByteCodeStaticPropertiesDynaBean>*/) bg.createClass();
	}

	//@Override
	public DynaBean newInstance() throws IllegalAccessException, InstantiationException {
		ByteCodeStaticPropertiesDynaBean bean = (ByteCodeStaticPropertiesDynaBean) klass.newInstance();
		bean.dynaClass = this;
		return bean;
	}

}
