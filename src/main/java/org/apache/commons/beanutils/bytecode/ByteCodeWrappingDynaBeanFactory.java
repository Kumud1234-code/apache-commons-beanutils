/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.beanutils.bytecode;

import org.apache.commons.beanutils.DynaBean;
import org.apache.commons.beanutils.DynaClass;
import org.apache.commons.beanutils.DynaProperty;

/**
 * Factory for building DynaBeans which also have statically
 * typed getter & setter methods for each DynaProperty. 
 *
 * The DynaBeans returned here are just wrappers around any
 * existing implementation of the DynaBean interface.  Their
 * classes (from dynamically generated bytecode) do NOT have
 * private member fields for each property, but simply 
 * delegate to the wrapped DynaBean; like so:
 * <blockquote><pre> public String getName() {
 *    return (String) this.get("name");
 * }
 * public void setName(String value) {
 *    set("name", value);
 * }</blockquote></pre>
 *
 * @see ByteCodeStaticPropertiesDynaClass an alternative approach
 *
 * @author Michael Vorburger
 */
public abstract class ByteCodeWrappingDynaBeanFactory {

	// This implementation could be optimized by introducing
	// some kind of Map<DynaClass, Class> cache,
	// where the Class was created only once...
	// May be some time later! ;-)
	
	public static DynaBean wrapAsRealJavaBean(DynaBean dynaBean) {
		DynaClass dynaClass = dynaBean.getDynaClass();
		DynaBeanBeanGenerator bg = new DynaBeanBeanGenerator();
		bg.setSuperclass(ByteCodeWrappingDynaBean.class);
		for (int i = 0; i < dynaClass.getDynaProperties().length; i++) {
			DynaProperty property = dynaClass.getDynaProperties()[i];
			bg.addProperty(property.getName(), property.getType());
		}

		ByteCodeWrappingDynaBean wrapper = (ByteCodeWrappingDynaBean) bg.create();
		wrapper.setDelegate(dynaBean);
		return wrapper;
	}
}
